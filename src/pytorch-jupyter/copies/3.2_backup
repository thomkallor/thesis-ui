FROM ubuntu:18.04
ENV DEBIAN_FRONTEND=noninteractive

ARG THEANO_VERSION=rel-0.8.2
ARG TENSORFLOW_VERSION=0.6.0
ARG TENSORFLOW_ARCH=gpu
ARG KERAS_VERSION=1.2.0
ARG LASAGNE_VERSION=v0.1
ARG TORCH_VERSION=latest
ARG CAFFE_VERSION=master
ARG PYTORCH_VERSION=0.3.1

RUN apt-get update && apt-get install -y \
	curl \
    git \
    wget \
    software-properties-common \
    g++ \
    sudo

RUN add-apt-repository ppa:deadsnakes/ppa

## install python 3.x version
RUN apt-get install -y python3.3

## make python3 default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.3 100 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.6 75

# RUN add-apt-repository ppa:deadsnakes/ppa
RUN apt-get update && apt-get install -y \
	python3-dev \
	python3-tk \
	python3-numpy \
    python3-pip


# Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary
# especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)
RUN apt-get update && apt-get install -y \
		python3-scipy \
		python3-nose \
		python3-h5py \
		python3-skimage \
		python3-matplotlib \
		python3-pandas \
		python3-sklearn \
		python3-sympy \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

RUN add-apt-repository ppa:deadsnakes/ppa

## depencies for torch (python-software-properties)
RUN apt-get install -y \
        python-apt \
        python-pycurl 

RUN wget http://archive.ubuntu.com/ubuntu/pool/universe/s/software-properties/python-software-properties_0.96.20_all.deb
RUN dpkg -i python-software-properties_0.96.20_all.deb
RUN apt-get install -y \
        python-software-properties

RUN apt-get install -y \
    python3.3-dev \
	python3.3-tk

RUN apt-get install -y build-essential libssl-dev

## Dependencies of caffe
RUN apt-get update && apt-get install -y \
		libboost-all-dev \
		libgflags-dev \
		libgoogle-glog-dev \
		libhdf5-serial-dev \
		libleveldb-dev \
		liblmdb-dev \
		libopencv-dev \
		libprotobuf-dev \
		libsnappy-dev \
		protobuf-compiler \
		libopenblas-dev \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

RUN python -m pip --no-cache-dir install \
		jupyter \
        ipykernel

## not needed
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.3 100 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 75
## notneeded

## for pytorch
RUN python -m pip --no-cache-dir install \
    ninja pyyaml==3.13 mkl mkl-include setuptools cmake

RUN apt-get update && apt-get install libffi-dev
# Add SNI support to Python
RUN  python -m pip --no-cache-dir install \
        pycparser==2.10 \
        cffi==1.14.0 \
        olefile==0.44 \
        pyopenssl==17.2.0


RUN python -m pip --no-cache-dir install \
		ndg-httpsclient==0.5.0 \
		pyasn1 \
		Cython \
		jupyter \
		path.py \
		Pillow==4 \
        wheel

RUN python -m pip --no-cache-dir install \
    numpy==1.10
## not needed
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.3 100 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 75
RUN apt-get update && apt-get install -y nvidia-driver-440

RUN wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb

RUN yes | dpkg -i ./cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb

RUN apt-get update && apt-get install -y cuda-toolkit-8-0

RUN rm cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb

#CuDNN installation change to cudnn6
RUN wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn6_6.0.21-1+cuda8.0_amd64.deb && \
	wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn6-dev_6.0.21-1+cuda8.0_amd64.deb

RUN yes | dpkg -i ./libcudnn6_6.0.21-1+cuda8.0_amd64.deb && \
	yes | dpkg -i ./libcudnn6-dev_6.0.21-1+cuda8.0_amd64.deb

RUN apt-get update && apt-get install -y libcudnn6-dev

RUN rm libcudnn6_6.0.21-1+cuda8.0_amd64.deb && \
	rm libcudnn6-dev_6.0.21-1+cuda8.0_amd64.deb

##change ld library path
ENV LIBRARY_PATH="/usr/local/cuda/lib64/stubs:$LIBRARY_PATH"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
ENV PATH="/usr/local/cuda/bin:$PATH"

# update alternatives of gcc, gcc-4.9 required for torch installation

RUN wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.9/libasan1_4.9.3-13ubuntu2_amd64.deb && \
	wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.9/cpp-4.9_4.9.3-13ubuntu2_amd64.deb && \
	wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.9/libgcc-4.9-dev_4.9.3-13ubuntu2_amd64.deb && \
	wget http://archive.ubuntu.com/ubuntu/pool/main/m/mpfr4/libmpfr4_3.1.4-1_amd64.deb && \
	wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.9/gcc-4.9-base_4.9.3-13ubuntu2_amd64.deb && \
	wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.9/gcc-4.9_4.9.3-13ubuntu2_amd64.deb && \
	wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.9/libstdc++-4.9-dev_4.9.3-13ubuntu2_amd64.deb && \
	wget http://archive.ubuntu.com/ubuntu/pool/universe/g/gcc-4.9/g++-4.9_4.9.3-13ubuntu2_amd64.deb

RUN dpkg -i libmpfr4_3.1.4-1_amd64.deb \
	gcc-4.9-base_4.9.3-13ubuntu2_amd64.deb \
	cpp-4.9_4.9.3-13ubuntu2_amd64.deb \
	libasan1_4.9.3-13ubuntu2_amd64.deb \
	libgcc-4.9-dev_4.9.3-13ubuntu2_amd64.deb \
	gcc-4.9_4.9.3-13ubuntu2_amd64.deb \
	libstdc++-4.9-dev_4.9.3-13ubuntu2_amd64.deb \
	g++-4.9_4.9.3-13ubuntu2_amd64.deb

RUN rm libmpfr4_3.1.4-1_amd64.deb \
	gcc-4.9-base_4.9.3-13ubuntu2_amd64.deb \
	cpp-4.9_4.9.3-13ubuntu2_amd64.deb \
	libasan1_4.9.3-13ubuntu2_amd64.deb \
	libgcc-4.9-dev_4.9.3-13ubuntu2_amd64.deb \
	gcc-4.9_4.9.3-13ubuntu2_amd64.deb \
	libstdc++-4.9-dev_4.9.3-13ubuntu2_amd64.deb \
	g++-4.9_4.9.3-13ubuntu2_amd64.deb

RUN apt-get update && apt-get install -y gcc-5 g++-5

# assign higher priority to gcc-5 caffe uses gcc-5
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 100 && \
	update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 75 && \
	update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 50

# assign higher priority to gcc-5 caffe uses gcc-5
RUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 100 && \
	update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 75 && \
	update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 50

#install pytorch gcc4
RUN git clone --recursive https://github.com/pytorch/pytorch.git
RUN cd pytorch && git checkout "v$PYTORCH_VERSION"
RUN cd pytorch && git submodule sync && git submodule update --init --recursive

RUN cd pytorch && python setup.py install

## install bazel for tensorflow
# RUN apt install gnupg
# RUN curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
# RUN echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | \
# 	tee /etc/apt/sources.list.d/bazel.list
# RUN sudo apt update && sudo apt install -y bazel

RUN wget https://github.com/bazelbuild/bazel/releases/download/0.1.1/bazel-0.1.1-installer-linux-x86_64.sh
RUN sudo apt-get install -y openjdk-8-jdk
RUN apt-get install zip unzip
RUN apt-get install bash-completion
RUN sudo bash ./bazel-0.1.1-installer-linux-x86_64.sh
RUN rm ./bazel-0.1.1-installer-linux-x86_64.sh

RUN git clone https://github.com/tensorflow/tensorflow.git
RUN cd tensorflow && git checkout "v$TENSORFLOW_VERSION"
RUN cd tensorflow &&  git submodule update --init --recursive
RUN wget http://www.ijg.org/files/jpegsrc.v9a.tar.gz && \
	wget https://sourceforge.net/projects/libpng/files/libpng12/older-releases/1.2.53/libpng-1.2.53.tar.gz
RUN mkdir --parents /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/jpeg_archive && \
	mkdir --parents /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/png_archive
RUN cp jpegsrc.v9a.tar.gz /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/jpeg_archive && \
	cp libpng-1.2.53.tar.gz /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/png_archive
RUN rm jpegsrc.v9a.tar.gz && rm libpng-1.2.53.tar.gz
RUN pip3 install six==1.10.0

RUN curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
RUN apt-get install -y nodejs
RUN npm install -g bower
RUN chown -R $USER:$GROUP ~/.npm
RUN chown -R $USER:$GROUP ~/.config
RUN bower install --allow-root sinonjs@1.17.1

RUN cd tensorflow && bazel build -c opt --config=cuda //tensorflow/tools/pip_package:build_pip_package
RUN pip install "/tmp/tensorflow_pkg/tensorflow-$TENSORFLOW_VERSION.whl"

#for pytorch

# Install Torch
# RUN git clone https://github.com/torch/distro.git /root/torch --recursive

# RUN cd /root/torch && bash install-deps

# RUN yes no | ./install.sh

# RUN wget https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tar.xz
# RUN apt-get install -y gcc+ 
# RUN apt-get install -y cmake

# RUN tar -xf Python-3.8.3.tar.xz && \
#     cd Python-3.8.3 && \
#     ./configure --enable-optimizations && \
#     make -j 8 && \
#     make altinstall

# RUN rm -rf Python-3.8.3.tar.xz ./Python-3.8.3

# Install pip

# RUN add-apt-repository ppa:deadsnakes/ppa
# RUN apt-get update && apt-get install python3.6


# RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
# 	python3 get-pip.py && \
# 	rm get-pip.py